use compact_str::CompactString;
use crate::ast::{Stmt, Expr, UnaryOp, BinaryOp};
use crate::token::Token;
use crate::lexer::LexicalError;

grammar;

//--------------------------------------------------------

CommaSeparated<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

//--------------------------------------------------------

pub Program: Vec<Stmt> =
    <mut stmts:Stmt*> <expr:Expr?> => match expr {
        None => stmts,
        Some(expr) => {
            stmts.push(Stmt::Expr(expr));
            stmts
        }
    };

Stmt: Stmt = {
    <Expr> ";" => Stmt::Expr(<>),
    DefStmt,
    LetStmt,
};

DefStmt: Stmt =
    "def" <name:Identifier> "(" <params:CommaSeparated<Identifier>> ")" "=" <body:Expr> ";"
        => Stmt::Def(name, params, body);

LetStmt: Stmt =
    "let" <name:Identifier> "=" <expr:Expr> ";"
        => Stmt::Let(name, expr);

pub Expr: Expr = {
    Expr5,
    IfExpr,
}

IfExpr: Expr =
    "if" <cond_expr:Expr> "then" <then_expr:Expr> "else" <else_expr:Expr>
        => Expr::If(Box::new(cond_expr), Box::new(then_expr), Box::new(else_expr));

Expr5: Expr = {
    Expr4,
    <lhs:Expr4> "==" <rhs:Expr4> => Expr::BinaryOp(BinaryOp::Eq, Box::new(lhs), Box::new(rhs)),
}

Expr4: Expr = {
    Expr3,
    <lhs:Expr4> "+" <rhs:Expr3> => Expr::BinaryOp(BinaryOp::Add, Box::new(lhs), Box::new(rhs)),
    <lhs:Expr4> "-" <rhs:Expr3> => Expr::BinaryOp(BinaryOp::Sub, Box::new(lhs), Box::new(rhs)),
};

Expr3: Expr = {
    Expr2,
    <lhs:Expr3> "*" <rhs:Expr2> => Expr::BinaryOp(BinaryOp::Mul, Box::new(lhs), Box::new(rhs)),
    <lhs:Expr3> "/" <rhs:Expr2> => Expr::BinaryOp(BinaryOp::Div, Box::new(lhs), Box::new(rhs)),
};

Expr2: Expr = {
    Expr1,
    "-" <Expr1> => Expr::UnaryOp(UnaryOp::Neg, Box::new(<>)),
}

Expr1: Expr = {
    Expr0,
    FunctionApplication,
}

FunctionApplication: Expr =
    <func:Expr0> "(" <args:CommaSeparated<Expr>> ")"
        => Expr::Apply(Box::new(func), args);

Expr0: Expr = {
    Number     => Expr::Number(<>),
    String     => Expr::String(<>),
    Identifier => Expr::Variable(<>),
    "(" <Expr> ")",
};

Number: f64 =
    "number literal";

String: CompactString =
    "string literal";

Identifier: CompactString =
    "identifier";

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        ";" => Token::Semicolon,
        "," => Token::Comma,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Asterisk,
        "/" => Token::Slash,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "=" => Token::Equal,
        "==" => Token::EqEq,

        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "def" => Token::Def,
        "let" => Token::Let,
        "in" => Token::In,

        "number literal" => Token::Number(<f64>),
        "string literal" => Token::String(<CompactString>),
        "identifier" => Token::Identifier(<CompactString>),
    }
}
